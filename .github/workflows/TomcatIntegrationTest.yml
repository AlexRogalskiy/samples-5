name: Tomcat integration test
on:
   push:
      branches:
      - "*"
jobs: 
    tomcat_integration_test:
       runs-on: ubuntu-latest
       steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Create kind cluster
          uses: helm/kind-action@v1.2.0
          with:
            cluster_name: tomcat-integration
  
        - name: Apply CRDs
          run: kubectl apply -f tomcat/k8s/crd.yaml

        - name: Set up Java and Maven
          uses: actions/setup-java@v2
          with:
            java-version: 15
            distribution: adopt-hotspot

        - name: cache
          uses: actions/cache@v2
          if: ${{ !env.ACT }}
          with:
            path: ~/.m2/repository
            key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-maven-m2

        - name: Set up Maven
          uses: stCarolas/setup-maven@v4
          if: ${{ env.ACT }}
          with:
            maven-version: 3.8.1

        - name: Run unit tests
          if: ${{ env.ACT }}
          run: mvn --version

        - name: Run unit tests
          run: mvn -B test -q --file tomcat/pom.xml

    tomcat_local_apply_setup_test:
       runs-on: ubuntu-latest
       steps:
        - name: Checkout
          uses: actions/checkout@v2
  
        - name: Set up Helm
          uses: azure/setup-helm@v1
          with:
            version: v3.4.0

        - name: test
          if: ${{ env.ACT }}
          run: |
            mkdir -p /etc/docker
            echo -n "{\"exec-opts\": [\"native.cgroupdriver=systemd\"],\"log-driver\": \"json-file\",\"log-opts\": {\"max-size\": \"100m\"},\"storage-driver\": \"overlay2\"}" > /etc/docker/daemon.json
            cat /etc/docker/daemon.json
            #sudo service docker status

        - name: Create Kubernetes KinD Cluster
          uses: container-tools/kind-action@v1.5.0
          if: ${{ !env.ACT }}
          with:
            cluster_name: tomcat-local-apply
            registry: true
            
        - name: Create kind cluster without registry
          uses: helm/kind-action@v1.2.0
          if: ${{ env.ACT }}
          with:
            cluster_name: tomcat-local-apply #${{ job.name }}
            registry: false       
          # for DIMG in "tomcat-local-apply-control-plane kind-registry tomcat_local_apply_setup_test "; do docker stop $DIMG ; docker rm $DIMG ; done ; sleep 1

        - name: Set up Java and Maven
          uses: actions/setup-java@v2
          with:
            # java-version: ${{ matrix.java }}
            java-version: 15
            distribution: adopt-hotspot

        - name: cache
          uses: actions/cache@v2
          if: ${{ !env.ACT }}
          with:
            path: ~/.m2/repository
            key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-maven-

        - name: Set up Maven for local ACT
          uses: stCarolas/setup-maven@v4
          if: ${{ env.ACT }}
          with:
            maven-version: 3.8.1
        
        - name: test local registry
          if: ${{ env.ACT }}
          run: |
            # Checking env variable
            if [[ "$KIND_REGISTRY" != "localhost:5000" ]]; then
              echo "Wrong KIND_REGISTRY env variable: $KIND_REGISTRY"
            fi

        - name: build jib
          if: ${{ !env.ACT }}
          run: |
            mvn -B install jib:dockerBuild jib:build -Djib.allowInsecureRegistries=true  \
                   -Djib.to.image=$KIND_REGISTRY/io.javaoperatorsdk/sample:1.7.1-SNAPSHOT \
                   --file tomcat/pom.xml -DskipTests

        - name: build jib
          if: ${{ env.ACT }}
          run: |
              mvn -B install jib:dockerBuild \
                    -Djib.to.image=sample:1.7.1-SNAPSHOT --file tomcat/pom.xml -DskipTests
              kind load docker-image sample:1.7.1-SNAPSHOT --name=tomcat-local-apply

        - name: Apply CRDs
          run: kubectl apply -f tomcat/k8s/crd.yaml

        - name: install tomcat operator
          if: ${{ !env.ACT }}
          run: |
            sed 's@image\: tomcat-operator@image\: kind-registry\:5000/io.javaoperatorsdk/sample\:1.7.1-SNAPSHOT@g'  tomcat/k8s/operator.yaml > tomcat/target/operator.yaml
            kubectl apply -f tomcat/target/operator.yaml

        - name: install tomcat operator
          if: ${{ env.ACT }}
          run: |
            sed 's@image\: tomcat-operator@image\: sample\:1.7.1-SNAPSHOT@g'  tomcat/k8s/operator.yaml > tomcat/target/operator.yaml
            kubectl apply -f tomcat/target/operator.yaml

        - name: create ns tomcatoperator-sample
          run: kubectl create ns tomcatoperator-sample

        - name: debug local kind
          if: ${{ env.ACT }}
          run: |
            kubectl get pods -n tomcat-operator -l app=tomcat-operator -o yaml | tee -a debug.log

        - name: wait for operators ready
          run: |
            LOOP=0 &&\
            while [[ $(kubectl get pods -n tomcat-operator -l app=tomcat-operator -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do \
              echo "waiting for pod" &&\
              kubectl logs -n tomcat-operator -l app=tomcat-operator &&\
              (( LOOP++ )) &&\
              if [[ $LOOP -gt 10 ]]; then exit 1; fi &&\
              echo "loop number $LOOP" &&\
              sleep 5; \
            done

        - name: install sample operators
          run: |
            for sample in $(ls tomcat/k8s/*sample*); do 
             kubectl -n tomcatoperator-sample apply -f $sample; 
            done

        - name: check pod correctly started
          run: |
            LOOP=0 &&\
            while [[ $(kubectl get pods -n tomcatoperator-sample -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True True True True True True" ]]; do \
              echo "waiting for pod" &&\
              kubectl logs -n tomcat-operator -l app=tomcat-operator &&\
              (( LOOP++ )) &&\
              if [[ $LOOP -gt 10 ]]; then exit 1; fi &&\
              echo "loop number $LOOP" &&\
              sleep 5; \
            done
            #Waiting 5 seconds for Tomcat to unpack the downloaded war
            sleep 5;

        - name: Get webapps
          #if: ${{ failure() }}
          run: |
            kubectl get tomcats,webapps -A -o yaml | tee -a debug
            kubectl -n tomcatoperator-sample -c tomcat logs -l app=test-tomcat1 | grep startup 
        
        - name: check code
          run: |
              kubectl -n tomcatoperator-sample run sample1 --labels=app=curl --image=curlimages/curl:7.78.0   --restart=Never --timeout=30s --command -- curl -s -v http://test-tomcat1/mysample/;
              kubectl -n tomcatoperator-sample run sample2 --labels=app=curl --image=curlimages/curl:7.78.0   --restart=Never --timeout=30s --command -- curl -s -v http://test-tomcat2/othercontext/;
              LOOP=0 &&\
              while [[ $(kubectl get pods -n tomcatoperator-sample -l app=curl -o 'jsonpath={..status.phase}') != "Succeeded Succeeded" ]]; do \
                echo "waiting for pod" &&\
                kubectl logs -n tomcatoperator-sample -l app=curl &&\
                (( LOOP++ )) &&\
                if [[ $LOOP -gt 5 ]]; then exit 1; fi &&\
                echo "loop number $LOOP" &&\
                sleep 5; \
              done
              if [[ $(kubectl logs -n tomcatoperator-sample sample1 --tail=500 | grep tomcat.gif | wc -l) -ne 1 ]]; then exit 1; fi
              if [[ $(kubectl logs -n tomcatoperator-sample sample2 --tail=500 | grep dog.jpeg | wc -l) -ne 1 ]]; then exit 1; fi
